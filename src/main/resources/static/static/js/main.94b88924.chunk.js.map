{"version":3,"sources":["components/Navbar.js","actions/projectTaskActions.js","actions/types.js","components/ProjectTask/ProjectTaskItem.js","components/ProjectBoard.js","components/ProjectTask/AddProjectTask.js","reducers/errorReducer.js","reducers/projectTaskReducer.js","reducers/rootReducer.js","store.js","components/ProjectTask/UpdateProjectTask.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","addProjectTask","project_task","history","dispatch","a","async","axios","post","push","payload","response","data","ProjectTaskItem","projectId","this","props","deleteProjectTask","id","summary","acceptanceCriteria","to","onClick","onDeleteClick","bind","Component","connect","window","confirm","delete","ProjectBoard","getBacklog","BoardContent","project_tasks","todoItems","inProgressItems","doneItems","length","role","tasks","map","key","i","status","Fragment","BoardAlgorithm","state","get","res","AddProjectTask","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProjectTask","classnames","placeholder","initialState","combineReducers","action","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProjectTask","match","params","getProjectTask","updatedTask","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94b88924.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n      <div className=\"container\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          Project Task Tool\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#mobile-nav\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_PROJECT_TASKS,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK\r\n} from \"./types\";\r\n\r\nexport const addProjectTask = (project_task, history) => async dispatch => {\r\n  try {\r\n    await axios.post(\"http://localhost:8080/api/board\", project_task);\r\n    history.push(\"/\");\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getBacklog = () => async dispatch => {\r\n  const res = await axios.get(\r\n    \"https://ppmtool-fullstack.herokuapp.com/api/board/all\"\r\n  );\r\n  dispatch({\r\n    type: GET_PROJECT_TASKS,\r\n    payload: res.data\r\n  });\r\n};\r\n\r\nexport const deleteProjectTask = projectId => async dispatch => {\r\n  if (\r\n    window.confirm(\r\n      `You are deleting project task ${projectId}, this action cannot be undone!`\r\n    )\r\n  ) {\r\n    await axios.delete(\r\n      `https://ppmtool-fullstack.herokuapp.com/api/board/${projectId}`\r\n    );\r\n    dispatch({\r\n      type: DELETE_PROJECT_TASK,\r\n      payload: projectId\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProjectTask = (projectId, history) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://ppmtool-fullstack.herokuapp.com/api/board/${projectId}`\r\n    );\r\n    dispatch({\r\n      type: GET_PROJECT_TASK,\r\n      payload: res.data\r\n    });\r\n  } catch (error) {\r\n    history.push(\"/\");\r\n  }\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\n\r\nexport const GET_PROJECT_TASKS = \"GET_PROJECT_TASKS\";\r\n\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\n\r\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteProjectTask } from \"../../actions/projectTaskActions\";\r\n\r\nclass ProjectTaskItem extends Component {\r\n  onDeleteClick(projectId) {\r\n    this.props.deleteProjectTask(projectId);\r\n  }\r\n\r\n  render() {\r\n    const { project_task } = this.props;\r\n\r\n    return (\r\n      <div className=\"card mb-1 bg-light\">\r\n        <div className=\"card-header text-primary\">ID: {project_task.id}</div>\r\n        <div className=\"card-body bg-light\">\r\n          <h5 className=\"card-title\">{project_task.summary}</h5>\r\n          <p className=\"card-text text-truncate \">\r\n            {project_task.acceptanceCriteria}\r\n          </p>\r\n          <Link\r\n            to={`updateProjectTask/${project_task.id}`}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            View / Update\r\n          </Link>\r\n\r\n          <button\r\n            className=\"btn btn-danger ml-4\"\r\n            onClick={this.onDeleteClick.bind(this, project_task.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectTaskItem.propTypes = {\r\n  deleteProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { deleteProjectTask })(ProjectTaskItem);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProjectTaskItem from \"./ProjectTask/ProjectTaskItem\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getBacklog } from \"../actions/projectTaskActions\";\r\n\r\nclass ProjectBoard extends Component {\r\n  componentDidMount() {\r\n    this.props.getBacklog();\r\n  }\r\n\r\n  render() {\r\n    const { project_tasks } = this.props.project_tasks;\r\n\r\n    let BoardContent;\r\n    let todoItems = [];\r\n    let inProgressItems = [];\r\n    let doneItems = [];\r\n\r\n    const BoardAlgorithm = project_tasks => {\r\n      if (project_tasks.length < 1) {\r\n        return (\r\n          <div className=\"alert alert-info text-center\" role=\"alert\">\r\n            No Project Tasks on this board\r\n          </div>\r\n        );\r\n      } else {\r\n        const tasks = project_tasks.map(project_task => (\r\n          <ProjectTaskItem key={project_task.id} project_task={project_task} />\r\n        ));\r\n\r\n        for (let i = 0; i < tasks.length; i++) {\r\n          if (tasks[i].props.project_task.status === \"TO_DO\") {\r\n            todoItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\r\n            inProgressItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"DONE\") {\r\n            doneItems.push(tasks[i]);\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-secondary text-white\">\r\n                      <h3>TO DO</h3>\r\n                    </div>\r\n                  </div>\r\n                  {}\r\n                  {}\r\n                  {todoItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-primary text-white\">\r\n                      <h3>In Progress</h3>\r\n                    </div>\r\n                  </div>\r\n                  {}\r\n                  {inProgressItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-success text-white\">\r\n                      <h3>Done</h3>\r\n                    </div>\r\n                  </div>\r\n                  {}\r\n                  {doneItems}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {}{\" \"}\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    BoardContent = BoardAlgorithm(project_tasks);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to=\"/addProjectTask\" className=\"btn btn-primary mb-3\">\r\n          <i className=\"fas fa-plus-circle\"> Create Project Task </i>\r\n        </Link>\r\n        <br />\r\n        <hr />\r\n        {BoardContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n  getBacklog: PropTypes.func.isRequired,\r\n  project_tasks: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  project_tasks: state.project_task\r\n});\r\n\r\nexport default connect(mapStateToProps, { getBacklog })(ProjectBoard);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addProjectTask } from \"../../actions/projectTaskActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass AddProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const newProjectTask = {\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n    this.props.addProjectTask(newProjectTask, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"addProjectTask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link to=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n              </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.summary\r\n                    })}\r\n                    name=\"summary\"\r\n                    value={this.state.summary}\r\n                    onChange={this.onChange}\r\n                    placeholder=\"Project Task summary\"\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddProjectTask.propTypes = {\r\n  addProjectTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { addProjectTask })(AddProjectTask);\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_PROJECT_TASKS,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  project_tasks: [],\r\n  project_task: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_PROJECT_TASKS:\r\n      return {\r\n        ...state,\r\n        project_tasks: action.payload\r\n      };\r\n\r\n    case DELETE_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_tasks: state.project_tasks.filter(\r\n          project_task => project_task.id !== action.payload\r\n        )\r\n      };\r\n\r\n    case GET_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_task: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport projectTaskReducer from \"./projectTaskReducer\";\r\n\r\nexport default combineReducers({\r\n  errors: errorReducer,\r\n  project_task: projectTaskReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst ReactReduxDevTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nlet store;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ReactReduxDevTools)\r\n  );\r\n} else {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  getProjectTask,\r\n  addProjectTask\r\n} from \"../../actions/projectTaskActions\";\r\n\r\nclass UpdateProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      id: \"\",\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n\r\n    const {\r\n      id,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status\r\n    } = nextProps.project_task.project_task;\r\n\r\n    this.setState({\r\n      id,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { projectId } = this.props.match.params;\r\n    this.props.getProjectTask(projectId);\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const updatedTask = {\r\n      id: this.state.id,\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n\r\n    this.props.addProjectTask(updatedTask, this.props.history);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"addProjectTask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link to=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n              </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.summary\r\n                    })}\r\n                    name=\"summary\"\r\n                    placeholder=\"Project Task summary\"\r\n                    onChange={this.onChange}\r\n                    value={this.state.summary}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n  project_task: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  getProjectTask: PropTypes.func.isRequired,\r\n  addProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  project_task: state.project_task,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { getProjectTask, addProjectTask })(\r\n  UpdateProjectTask\r\n);\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport ProjectBoard from \"./components/ProjectBoard\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport AddProjectTask from \"./components/ProjectTask/AddProjectTask\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport UpdateProjectTask from \"./components/ProjectTask/UpdateProjectTask\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <Route exact path=\"/\" component={ProjectBoard} />\r\n            <Route exact path=\"/addProjectTask\" component={AddProjectTask} />\r\n            <Route\r\n              exact\r\n              path=\"/updateProjectTask/:projectId\"\r\n              component={UpdateProjectTask}\r\n            />\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}